"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Debug = void 0;
const errors_1 = require("../../../errors");
const io_1 = require("../../../io");
const inspected_1 = require("../../../io/inspected");
const model_1 = require("../../../model");
const Interaction_1 = require("../../Interaction");
const breakpoint_1 = require("./breakpoint");
const viewer_1 = require("./viewer");
/**
 * Instructs the {@apilink Actor} to set a breakpoint and optionally evaluate and log the provided {@apilink Answerable} values.
 *
 * Since this interaction sets a breakpoint using the [`debugger`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/debugger) statement,
 * the best way to use it is while running the test scenario via a Node.js debugger.
 * See the links below to learn how to do it in popular IDEs.
 *
 * ## Setting a breakpoint to pause the scenario
 *
 * Note that for setting the breakpoint to work you need to run your test scenario via a Node.js debugger.
 *
 * ```ts
 * import { actorCalled, Debug } from '@serenity-js/core'
 * import { Navigate } from '@serenity-js/web'
 *
 * await actorCalled('Debbie').attemptsTo(
 *   Navigate.to('http://example.org'),
 *   Debug.setBreakpoint(),
 *   // ... other activities
 * );
 * ```
 *
 * ## Debugging Answerable values
 *
 * ```ts
 * import { actorCalled, Debug } from '@serenity-js/core'
 * import { Navigate, Page } from '@serenity-js/web'
 *
 * // Running the below through the Node.js debugger makes the actor resolve the provided values
 * // and return them to the debugger function, where you can investigate their contents,
 * // or inspect any Errors the evaluation has resulted with.
 * await actorCalled('Debbie').attemptsTo(
 *   Navigate.to('http://example.org'),
 *   Debug.values(Page.current().title(), Page.current().url()), // accepts multiple values
 * );
 * ```
 *
 * ## Learn more
 * - [Node.js debugging - Getting started](https://nodejs.org/en/docs/guides/debugging-getting-started/)
 * - [Node.js debugging in VS Code](https://code.visualstudio.com/docs/nodejs/nodejs-debugging)
 * - [Running and debugging Node.js in WebStorm](https://www.jetbrains.com/help/webstorm/running-and-debugging-node-js.html)
 *
 * @group Interactions
 */
class Debug extends Interaction_1.Interaction {
    /**
     * Invokes a debugger function that sets a breakpoint.
     * To use this interaction, run your test scenario in the Node.js debugger.
     */
    static setBreakpoint() {
        /* istanbul ignore next can't test using a debugger in an automated test */
        return new Debug(`#actor sets a breakpoint`, breakpoint_1.breakpoint, []);
    }
    /**
     * Instructs the Actor to evaluate the provided `values`,
     * log the results, and then pass them to a debugger function.
     *
     * To use this interaction, run your test scenario in the Node.js debugger.
     *
     * @param values
     *  The values to be debugged
     */
    static values(...values) {
        /* istanbul ignore next can't test using a debugger in an automated test */
        return new Debug(`#actor debugs ${values.length} values`, viewer_1.viewer, values);
    }
    /**
     * @param description
     *  Description of this interaction
     *
     * @param debuggerFunction
     *  Callback function to receive the results of debugging
     *
     * @param values
     *  Values to be evaluated by the actor, and provided to debuggerFunction
     */
    constructor(description, debuggerFunction, values) {
        super(description);
        this.debuggerFunction = debuggerFunction;
        this.values = values;
    }
    /**
     * @inheritDoc
     */
    async performAs(actor) {
        const results = [];
        for (const value of this.values) {
            const result = {
                description: (0, io_1.d) `${value}`,
                value: undefined,
                error: undefined,
            };
            try {
                result.value = await actor.answer(value);
            }
            catch (error) {
                result.error = error;
            }
            actor.collect(model_1.LogEntry.fromJSON({
                data: JSON.stringify({
                    value: (0, inspected_1.inspected)(result.value),
                    error: result.error ? errors_1.ErrorSerialiser.serialise(result.error) : result.error
                }),
            }), new model_1.Name(result.description));
            results.push(result);
        }
        this.debuggerFunction(results);
    }
}
exports.Debug = Debug;
//# sourceMappingURL=Debug.js.map