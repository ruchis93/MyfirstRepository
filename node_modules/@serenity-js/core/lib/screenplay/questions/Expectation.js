"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Expectation = void 0;
const io_1 = require("../../io");
const __1 = require("../");
/**
 * Defines an expectation to be used with {@apilink @apilink Wait.until}, {@apilink Check.whether}, {@apilink Ensure.that}
 * and as part of the Page Element Query Language with {@apilink PageElements.where} and {@apilink List.where}.
 *
 * @group Expectations
 */
class Expectation {
    /**
     * Used to define a simple {@apilink Expectation}
     *
     * #### Simple parameterised expectation
     *
     * ```ts
     *  import { actorCalled, Expectation } from '@serenity-js/core'
     *  import { Ensure } from '@serenity-js/assertions'
     *
     *  function isDivisibleBy(expected: Answerable<number>): Expectation<number> {
     *      return Expectation.thatActualShould<number, number>('have value divisible by', expected)
     *          .soThat((actualValue, expectedValue) => actualValue % expectedValue === 0);
     *  }
     *
     *  await actorCalled('Erica').attemptsTo(
     *      Ensure.that(4, isDivisibleBy(2)),
     *  )
     * ```
     *
     * @param relationshipName
     *  Name of the relationship between the `actual` and the `expected`. Use format `have value <adjective>`
     *  so that the description works in both positive and negative contexts, e.g. `Waited until 5 does have value greater than 2`,
     *  `Expected 5 to not have value greater than 2`.
     *
     * @param expectedValue
     */
    static thatActualShould(relationshipName, expectedValue) {
        return ({
            soThat: (simplifiedPredicate) => {
                const subject = relationshipName + ' ' + (0, io_1.d) `${expectedValue}`;
                return new Expectation(subject, async (actor, actualValue) => {
                    const expected = await actor.answer(expectedValue);
                    const actual = await actor.answer(actualValue);
                    const result = await simplifiedPredicate(actual, expected);
                    return result
                        ? new __1.ExpectationMet(subject, expected, actual)
                        : new __1.ExpectationNotMet(subject, expected, actual);
                });
            },
        });
    }
    /**
     * Used to compose {@apilink Expectation|expectations}.
     *
     * #### Composing {@apilink Expectation|expectations}
     *
     * ```ts
     * import { actorCalled, Expectation } from '@serenity-js/core'
     * import { Ensure, and, or, isGreaterThan, isLessThan, equals  } from '@serenity-js/assertions'
     *
     * function isWithin(lowerBound: number, upperBound: number) {
     *   return Expectation
     *     .to(`have value within ${ lowerBound } and ${ upperBound }`)
     *     .soThatActual(
     *       and(
     *         or(isGreaterThan(lowerBound), equals(lowerBound)),
     *         or(isLessThan(upperBound), equals(upperBound)),
     *       )
     *     )
     *  }
     *
     *  await actorCalled('Erica').attemptsTo(
     *      Ensure.that(5, isWithin(3, 6)),
     *  )
     * ```
     *
     * @param relationshipName
     *  Name of the relationship between the `actual` and the `expected`. Use format `have value <adjective>`
     *  so that the description works in both positive and negative contexts, e.g. `Waited until 5 does have value greater than 2`,
     *  `Expected 5 to not have value greater than 2`.
     */
    static to(relationshipName) {
        return {
            soThatActual: (expectation) => {
                return new Expectation(relationshipName, async (actor, actualValue) => {
                    const outcome = await actor.answer(expectation.isMetFor(actualValue));
                    return outcome;
                });
            },
        };
    }
    constructor(subject, predicate) {
        this.subject = subject;
        this.predicate = predicate;
    }
    /**
     * Returns a {@apilink QuestionAdapter} that resolves to {@apilink ExpectationOutcome}
     * indicating that the {@apilink ExpectationMet|expectation was met}
     * or that the {@apilink ExpectationNotMet|expectation was not met}
     *
     * @param actual
     */
    isMetFor(actual) {
        return __1.Question.about(this.subject, actor => this.predicate(actor, actual));
    }
    /**
     * @inheritDoc
     */
    describedAs(subject) {
        this.subject = subject;
        return this;
    }
    /**
     * @inheritDoc
     */
    toString() {
        return this.subject;
    }
}
exports.Expectation = Expectation;
//# sourceMappingURL=Expectation.js.map