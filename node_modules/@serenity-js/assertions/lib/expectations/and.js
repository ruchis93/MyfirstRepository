"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.and = void 0;
const core_1 = require("@serenity-js/core");
const tiny_types_1 = require("tiny-types");
/**
 * Creates an {@apilink Expectation|expectation} that is met when all the `expectations` are met for the given actual value.
 *
 * Use `and` to combine several expectations using logical "and",
 *
 * ## Combining several expectations
 *
 * ```ts
 * import { actorCalled } from '@serenity-js/core'
 * import { Ensure, and, startsWith, endsWith } from '@serenity-js/assertions'
 *
 * await actorCalled('Ester').attemptsTo(
 *   Ensure.that('Hello World!', and(startsWith('Hello'), endsWith('!'))),
 * )
 * ```
 *
 * @param expectations
 *
 * @group Expectations
 */
function and(...expectations) {
    return new And(expectations);
}
exports.and = and;
/**
 * @package
 */
class And extends core_1.Expectation {
    constructor(expectations) {
        super(expectations.map(expectation => expectation.toString()).join(And.Separator), (actor, actual) => {
            return expectations.reduce((previous, current) => previous.then(outcome => (0, tiny_types_1.match)(outcome)
                .when(core_1.ExpectationNotMet, o => o)
                .else(_ => actor.answer(current.isMetFor(actual)))), Promise.resolve(void 0));
        });
        this.expectations = expectations;
    }
}
And.Separator = ' and ';
//# sourceMappingURL=and.js.map