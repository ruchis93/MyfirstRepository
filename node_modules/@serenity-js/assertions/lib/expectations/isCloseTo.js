"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCloseTo = void 0;
const core_1 = require("@serenity-js/core");
/**
 * Produces an {@apilink Expectation|expectation} that is met when the actual value
 * is within a given ± `absoluteTolerance` range of the `expected` value.
 *
 * ## Ensuring that a given floating point number is close to the expected number
 *
 * ```ts
 *  import { actorCalled } from '@serenity-js/core'
 *  import { Ensure, isCloseTo } from '@serenity-js/assertions'
 *
 *  await actorCalled('Iris').attemptsTo(
 *      Ensure.that(10.123, isCloseTo(10, 0.2))
 *  )
 * ```
 *
 * @param expected
 * @param [absoluteTolerance=1e-9]
 *  Absolute ± tolerance range, defaults to `1e-9`
 *
 * @group Expectations
 */
function isCloseTo(expected, absoluteTolerance = 1e-9) {
    return new IsCloseTo(expected, absoluteTolerance);
}
exports.isCloseTo = isCloseTo;
/**
 * @package
 */
class IsCloseTo extends core_1.Expectation {
    constructor(expected, absoluteTolerance) {
        super((0, core_1.d) `have value close to ${expected} ±${absoluteTolerance}`, async (actor, actual) => {
            const actualValue = await actor.answer(actual);
            const expectedValue = await actor.answer(this.expected);
            const tolerance = await actor.answer(this.absoluteTolerance);
            const description = `have value close to ${expectedValue} ±${tolerance}`;
            // short-circuit exact equality
            if (actualValue === expectedValue) {
                return new core_1.ExpectationMet(description, expectedValue, actualValue);
            }
            if (!(Number.isFinite(actualValue) && Number.isFinite(expectedValue))) {
                return new core_1.ExpectationNotMet(description, expectedValue, actualValue);
            }
            const difference = Math.abs(actualValue - expectedValue);
            const isClose = difference <= tolerance;
            return isClose
                ? new core_1.ExpectationMet(description, expectedValue, actualValue)
                : new core_1.ExpectationNotMet(description, expectedValue, actualValue);
        });
        this.expected = expected;
        this.absoluteTolerance = absoluteTolerance;
    }
}
//# sourceMappingURL=isCloseTo.js.map